/*======================================
AMPL model for Part C
=======================================*/

reset;

# define sets
# -----------
set T ordered;	# The set of timesteps

# define parameters
# ----------------
param conso {T} >= 0;	# Needs of the consumer
param lcos {T} >= 0;	# LCOS
param sell {T} >= 0;	# Sell prices
param buy {T} >= 0;	# Buy prices
param pv {T} >= 0;	# PV output
param charging_efficiency;
param battery_capacity_value;
param max_charge_value;
param max_discharge_value;
param max_sell_grid_value;
param max_buy_grid_value;
param big_M;
param packet_size;
param battery_extension_amount;
param battery_extension_cost;

# define variables
# ----------------
var gc_n {t in T} integer >= 0, <= 7; # Grid to consumer (number of packets)
var bg_n {t in T} integer >= 0, <= 7; # Battery to grid" (number of packets)
var bc {t in T} >= 0; # Battery to consumer
var gb_n {t in T} integer >= 0, <= 7; # Grid to battery *number of packets)
var pvg_n {t in T} integer >= 0, <= 7; # PV to grid (number of packets)
var pvc {t in T} >= 0; # PV to consumer
var pvb {t in T} >= 0; # PV to battery
var charge_level {t in T} >= 0; # Level of charge in battery
var to_buy {t in T} binary; # Decision variable on whether to buy from grid or not
var to_sell {t in T} binary; # Decision variable on whether to sell from grid or not"
var add_battery {t in T} binary;	# Decision variable on whether we add to the battery capacity or not
var battery_capacity {t in T};		# Battery capacity at time t

# define auxiliary variables
#--------------------------
var gc {t in T} = gc_n[t]*packet_size;
var bg {t in T} = bg_n[t]*packet_size;
var gb {t in T} = gb_n[t]*packet_size;
var pvg {t in T} = pvg_n[t]*packet_size;

# define objective function 
# ------------------------
minimize cost :
	sum {t in T} buy[t]*(gc[t] + gb[t]) -
	sum {t in T} sell[t]*(pvg[t] + bg[t]) +
	sum {t in T} lcos[t]*(pvb[t] + gb[t]) + 
	sum {t in T} add_battery[t]*battery_extension_cost;

# define constraints
# -----------------

# The output of the PV should not exceed the production
subject to photovoltaic {t in T}:
	pvg[t] + pvc[t] + pvb[t] <= pv[t];

# The level of charge of the battery
subject to charge_evolution {t in T}:
	charge_level[t] =
		if t = first(T) then
			charging_efficiency*(gb[t] + pvb[t]) - (bc[t] + bg[t])
		else
			charge_level[t - 1] + charging_efficiency*(gb[t] + pvb[t]) - (bc[t] + bg[t]);		

# The charge capacity of the battery
subject to battery_capacity_increase {t in T}:
	battery_capacity[t] =
		if t = first(T) then
			battery_capacity_value + add_battery[t]*battery_extension_amount
		else
			battery_capacity[t - 1] + add_battery[t]*battery_extension_amount;

# The charge capacity of the battery should not exceed a certain threshold
subject to charge_capacity {t in T}:
	charge_level[t] <= battery_capacity[t];	

# maximum charge
subject to max_charge {t in T}:
	gb[t] + pvb[t] <= max_charge_value;

# maximum discharge
subject to max_discharge {t in T}:
	bg[t] + bc[t] <= max_discharge_value;

# We cannot sell to the grid more than a certain threshold
subject to max_sell_grid {t in T}:
	bg[t] + pvg[t] <= max_sell_grid_value;

# We cannot buy from the grid more than a certain threshold
subject to max_buy_grid {t in T}:
	gb[t] + gc[t] <= max_buy_grid_value;

# We need to satisfy the demand of the consumer
subject to consumption {t in T}:
	gc[t] + pvc[t] + bc[t] = conso[t];

# We either buy or sell: only one of the two variables can be 1
subject to buy_or_sell {t in T}:
	to_buy[t] + to_sell[t] <= 1;

# If to_buy == 0 we do not buy; we use the Big-M method
subject to do_buy {t in T}:
	gb[t] + gc[t] <= to_buy[t]*big_M;

# If to_sell == 0 we do not sell; we use the Big-M method
subject to do_sell {t in T}:
	bg[t] + pvg[t] <= to_sell[t]*big_M;
