/*======================================
AMPL model for Part A
=======================================*/

reset;

# define sets
# -----------
set T ordered;	# The set of timesteps

# define parameters
# ----------------
param conso {T} >= 0;	# Needs of the consumer
param lcos {T} >= 0;	# LCOS
param sell {T} >= 0;	# Sell prices
param buy {T} >= 0;	# Buy prices
param pv {T} >= 0;	# PV output
param charging_efficiency;
param battery_capacity_value;
param max_charge_value;
param max_discharge_value;
param max_sell_grid_value;
param max_buy_grid_value;

# define variables
# ----------------
var gc {t in T} >= 0; # Grid to consumer
var bg {t in T} >= 0; # Battery to grid"
var bc {t in T} >= 0; # Battery to consumer
var gb {t in T} >= 0; # Grid to battery
var pvg {t in T} >= 0; # PV to grid
var pvc {t in T} >= 0; # PV to consumer
var pvb {t in T} >= 0; # PV to battery
var charge_level {t in T} >= 0; # Level of charge in battery

# define objective function 
# ------------------------
minimize cost :
	sum {t in T} buy[t]*(gc[t] + gb[t]) -
	sum {t in T} sell[t]*(pvg[t] + bg[t]) +
	sum {t in T} lcos[t]*(bg[t] + bc[t]);

# define constraints
# -----------------

# The output of the PV should not exceed the production
subject to photovoltaic {t in T}:
	pvg[t] + pvc[t] + pvb[t] <= pv[t];

# The level of charge of the battery
subject to charge_evolution {t in T}:
	charge_level[t] =
		if t = first(T) then
			charging_efficiency*(gb[t] + pvb[t]) - (bc[t] + bg[t])
		else
			charge_level[t - 1] + charging_efficiency*(gb[t] + pvb[t]) - (bc[t] + bg[t]);		

# the charge capacity of the battery should not exceed a certain threshold
subject to battery_capacity {t in T}:
	charge_level[t] <= battery_capacity_value;	

# maximum charge
subject to max_charge {t in T}:
	gb[t] + pvb[t] <= max_charge_value;

# maximum discharge
subject to max_discharge {t in T}:
	bg[t] + bc[t] <= max_discharge_value;

# We cannot sell to the grid more than a certain threshold
subject to max_sell_grid {t in T}:
	bg[t] + pvg[t] <= max_sell_grid_value;

# We cannot buy from the grid more than a certain threshold
subject to max_buy_grid {t in T}:
	gb[t] + gc[t] <= max_buy_grid_value;

# We need to satisfy the demand of the consumer
subject to consumption {t in T}:
	gc[t] + pvc[t] + bc[t] = conso[t];
